/* Basic.java */
/* Generated By:JavaCC: Do not edit this line. Basic.java */
package edu.itsco;
import java.io.FileInputStream;
import java.io.FileNotFoundException;

public class Basic implements BasicConstants {

  private static AdministraVariables adminVariables;
  private static GeneraCodigo generaCodigo;

  public static void main(String args []) throws ParseException
  {
    //Basic parser = new Basic(System.in);
    try {
        adminVariables = new AdministraVariables();
        generaCodigo = new GeneraCodigo("salida.c");
            Basic parser = new Basic(
              new FileInputStream("entrada.txt"));
            System.out.println("Bienvenidos al compilador 603-SA");
            parser.principal();
            System.out.println("Compilo correctamente...");
            generaCodigo.terminarGeneracion();
        }catch(FileNotFoundException fex) {
                System.err.println(
                  "No se puede abrir el archivo");
        }catch(Exception e) {
                System.err.println(e.getMessage());
        }
  }

  static final public void principal() throws ParseException, SemanticException {
    jj_consume_token(INICIO);
    jj_consume_token(ID);
    sentencias();
    jj_consume_token(FIN);
}

  static final public void sentencias() throws ParseException, SemanticException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VAR:{
        declararVariable();
        break;
        }
      case IMPRIMIR:{
        gramaticaImprimir();
        break;
        }
      case LEER:{
        gramaticaLeer();
        break;
        }
      case SI:{
        gramaticaIf();
        break;
        }
      case SELECCIONA:{
        gramaticaSwitch();
        break;
        }
      case DESDE:{
        gramaticaFor();
        break;
        }
      case MIENTRAS:{
        gramaticaWhile();
        break;
        }
      case HACER:{
        gramaticaDo();
        break;
        }
      case ID:{
        gramaticaAsignacion();
        break;
        }
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IMPRIMIR:
      case LEER:
      case SI:
      case DESDE:
      case HACER:
      case MIENTRAS:
      case VAR:
      case SELECCIONA:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
    }
}

  static final public void declararVariable() throws ParseException, SemanticException {Token id;
  Token tipo;
  String tipo2;
  boolean inicializada = false;
    jj_consume_token(VAR);
    id = jj_consume_token(ID);
    jj_consume_token(DP);
    tipo = tipoDato();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case IGUAL:{
      jj_consume_token(IGUAL);
      tipo2 = valor();
inicializada = true;
          adminVariables.validaTipos(tipo.image, tipo2);
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      ;
    }
Variable v = new Variable(id.image);
          v.setInicializada(inicializada);
          v.setTipoDato(tipo.image);
          adminVariables.addVariable(v);
}

  static final public Token tipoDato() throws ParseException {Token tipo;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ENTERO:{
      tipo = jj_consume_token(ENTERO);
      break;
      }
    case DECIMAL:{
      tipo = jj_consume_token(DECIMAL);
      break;
      }
    case CADENA:{
      tipo = jj_consume_token(CADENA);
      break;
      }
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return tipo;}
    throw new Error("Missing return statement in function");
}

  static final public String valor() throws ParseException, SemanticException {Token id;
        String valor;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case VALOR_ENTERO:{
      jj_consume_token(VALOR_ENTERO);
valor = "entero";
      break;
      }
    case VALOR_CADENA:{
      jj_consume_token(VALOR_CADENA);
valor = "cadena";
      break;
      }
    case VALOR_DECIMAL:{
      jj_consume_token(VALOR_DECIMAL);
valor = "decimal";
      break;
      }
    case ID:{
      id = jj_consume_token(ID);
Variable v = new Variable(id.image);
                adminVariables.existeVariable(v);
                adminVariables.validarInicializada(v);
                valor = adminVariables.getTipoDato(v);
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
{if ("" != null) return valor;}
    throw new Error("Missing return statement in function");
}

  static final public void gramaticaImprimir() throws ParseException, SemanticException {
    jj_consume_token(IMPRIMIR);
    jj_consume_token(AP);
    valor();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:{
        ;
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        break label_2;
      }
      jj_consume_token(SUMA);
      valor();
    }
    jj_consume_token(CP);
}

  static final public void gramaticaLeer() throws ParseException, SemanticException {Token id;
    jj_consume_token(LEER);
    jj_consume_token(AP);
    id = jj_consume_token(ID);
    jj_consume_token(CP);
Variable v = new Variable(id.image);
                adminVariables.existeVariable(v);
                //aqu√≠ tambien se inicializan las variables
                adminVariables.inicializaVariable(v);
}

  static final public void gramaticaAsignacion() throws ParseException, SemanticException {Token id;
        String tipoDato;
    id = jj_consume_token(ID);
Variable v = new Variable(id.image);
                adminVariables.existeVariable(v);
                tipoDato = adminVariables.getTipoDato(v);
    jj_consume_token(IGUAL);
    operacion(tipoDato);
adminVariables.inicializaVariable(v);
}

  static final public void operacion(String tipoDato) throws ParseException, SemanticException {String tipoDato2;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:
    case VALOR_ENTERO:
    case VALOR_DECIMAL:
    case VALOR_CADENA:{
      tipoDato2 = valor();
adminVariables.tiposDeDatosIncompatibles(tipoDato,tipoDato2);
      break;
      }
    case AP:{
      opParentesis(tipoDato);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case SUMA:
      case RESTA:
      case MULTI:
      case DIV:
      case RESIDUO:{
        ;
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        break label_3;
      }
      opAritmetico(tipoDato);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:
      case VALOR_ENTERO:
      case VALOR_DECIMAL:
      case VALOR_CADENA:{
        tipoDato2 = valor();
adminVariables.tiposDeDatosIncompatibles(tipoDato,tipoDato2);
        break;
        }
      case AP:{
        opParentesis(tipoDato);
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
}

  static final public void opAritmetico(String tipoDato) throws ParseException, SemanticException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SUMA:{
      jj_consume_token(SUMA);
      break;
      }
    case RESTA:
    case MULTI:
    case DIV:
    case RESIDUO:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RESTA:{
        jj_consume_token(RESTA);
        break;
        }
      case MULTI:{
        jj_consume_token(MULTI);
        break;
        }
      case DIV:{
        jj_consume_token(DIV);
        break;
        }
      case RESIDUO:{
        jj_consume_token(RESIDUO);
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
adminVariables.
                operacionInvalidaConCadenas(tipoDato);
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void opParentesis(String tipoDato) throws ParseException, SemanticException {
    jj_consume_token(AP);
    operacion(tipoDato);
    jj_consume_token(CP);
}

  static final public void gramaticaIf() throws ParseException, SemanticException {
    jj_consume_token(SI);
    condicion();
    jj_consume_token(ENTONCES);
    sentencias();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      jj_consume_token(SINO);
      sentencias();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SI);
}

  static final public void condicion() throws ParseException, SemanticException {
    condicionSimple();
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        ;
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        break label_4;
      }
      opLogico();
      condicionSimple();
    }
}

  static final public void opLogico() throws ParseException {
    jj_consume_token(AND);
    jj_consume_token(OR);
}

  static final public void condicionSimple() throws ParseException, SemanticException {String tipo1;
  String tipo2;
    tipo1 = valor();
    opRelacional();
    tipo2 = valor();
adminVariables.validaTipos(tipo1, tipo2);
}

  static final public void opRelacional() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MAYOR:{
      jj_consume_token(MAYOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:{
        jj_consume_token(IGUAL);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        ;
      }
      break;
      }
    case MENOR:{
      jj_consume_token(MENOR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IGUAL:
      case MAYOR:{
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case IGUAL:{
          jj_consume_token(IGUAL);
          break;
          }
        case MAYOR:{
          jj_consume_token(MAYOR);
          break;
          }
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    case IGUAL:{
      jj_consume_token(IGUAL);
      jj_consume_token(IGUAL);
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  static final public void gramaticaFor() throws ParseException, SemanticException {Token id;
    jj_consume_token(DESDE);
    id = jj_consume_token(ID);
    jj_consume_token(IGUAL);
    valor();
    jj_consume_token(HASTA);
    valor();
Variable v = new Variable(id.image);
                adminVariables.existeVariable(v);
                adminVariables.inicializaVariable(v);
    sentencias();
    jj_consume_token(SIGUIENTE);
}

  static final public void gramaticaWhile() throws ParseException, SemanticException {
    jj_consume_token(MIENTRAS);
    condicion();
    jj_consume_token(HACER);
    sentencias();
    jj_consume_token(FIN);
    jj_consume_token(MIENTRAS);
}

  static final public void gramaticaDo() throws ParseException, SemanticException {
    jj_consume_token(HACER);
    sentencias();
    jj_consume_token(HASTA);
    condicion();
}

  static final public void gramaticaSwitch() throws ParseException, SemanticException {Token id;
    jj_consume_token(SELECCIONA);
    id = jj_consume_token(ID);
Variable v = new Variable(id.image);
                adminVariables.existeVariable(v);
                adminVariables.validarInicializada(v);
    label_5:
    while (true) {
      jj_consume_token(CASO);
      jj_consume_token(DP);
      sentencias();
      jj_consume_token(ROMPE);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CASO:{
        ;
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        break label_5;
      }
    }
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case SINO:{
      jj_consume_token(SINO);
      jj_consume_token(DP);
      sentencias();
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      ;
    }
    jj_consume_token(FIN);
    jj_consume_token(SELECCIONA);
}

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public BasicTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[19];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x239380,0x239380,0x20000000,0x1c0000,0x0,0x1000000,0x0,0x1f000000,0x0,0x1e000000,0x1f000000,0x800,0x0,0x20000000,0x60000000,0x60000000,0xe0000000,0x400000,0x800,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x400,0x400,0x0,0x0,0x3c00,0x0,0x3c10,0x0,0x3c10,0x0,0x0,0x0,0x1,0x0,0x0,0x0,0x0,0x0,0x0,};
	}

  /** Constructor with InputStream. */
  public Basic(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Basic(java.io.InputStream stream, String encoding) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser.  ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new BasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Basic(java.io.Reader stream) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new BasicTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new BasicTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Basic(BasicTokenManager tm) {
	 if (jj_initialized_once) {
	   System.out.println("ERROR: Second call to constructor of static parser. ");
	   System.out.println("	   You must either use ReInit() or set the JavaCC option STATIC to false");
	   System.out.println("	   during parser generation.");
	   throw new Error();
	 }
	 jj_initialized_once = true;
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(BasicTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 19; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  static private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[46];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 19; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 46; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  static private boolean trace_enabled;

/** Trace enabled. */
  static final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
